// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketapi.Data;

#nullable disable

namespace Ticketapi.Data.Migrations
{
    [DbContext(typeof(TicketDbContext))]
    [Migration("20250129050531_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectsUsers", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectsId = 1,
                            UsersId = 2
                        },
                        new
                        {
                            ProjectsId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            ProjectsId = 2,
                            UsersId = 3
                        });
                });

            modelBuilder.Entity("Ticketapi.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Project B"
                        });
                });

            modelBuilder.Entity("Ticketapi.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fix Bug #101",
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Add Feature #202",
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Refactor Code",
                            ProjectId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Ticketapi.Models.TicketTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TicketTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Investigate Bug",
                            TicketId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Write Unit Tests",
                            TicketId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Ticketapi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alex"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bob"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Marco"
                        });
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("Ticketapi.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketapi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
